####PACKAGE INSTALLATION #####

- name: install pip3
  yum: name=python3-pip state=present 

- name : Install unzip package
  yum: name=unzip state=present update_cache=true

- name: Install boto3 and botocore with pip3 module
  ansible.builtin.pip:
    name: 
      - boto3
      - botocore

#### DIRECTORY CREATIONS ####

- name: Creates directory to install CP
  ansible.builtin.file:
    path: "{{ base_path }}"
    state: directory

- name: Creates directory for Ansible Administration tasks
  ansible.builtin.file:
    path: "{{ cp_ansible_directory_path }}"
    state: directory

#### S3 BUCKET (this playbook assumes using S3 bucket to store RPM) #####

- name: List Objects in CP bucket
  amazon.aws.aws_s3:
    bucket: "{{cp_s3_bucket}}"
    mode: list
    aws_access_key:  "{{ lookup('env','AWS_ACCESS_KEY') }}"
    aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
  register: objects_in_ansible_cp_bucket

- set_fact:
    cp_zip: "{{ cp_file }}"

- set_fact:
    s3_bucket_has_cp_zip: "{{cp_zip in objects_in_ansible_cp_bucket.s3_keys}}"

- name: Download CP Zip File from S3
  when: s3_bucket_has_cp_zip
  amazon.aws.aws_s3:
    bucket: "{{ cp_s3_bucket }}"
    object: "{{ cp_zip }}"
    dest: /tmp/Secrets Manager Credential Providers_13.0_1700079387055.zip
    mode: get
    aws_access_key:  "{{ lookup('env','AWS_ACCESS_KEY') }}"
    aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"

- name: Extract files into CP directory
  unarchive: 
    src: /tmp/Secrets Manager Credential Providers_13.0_1700079387055.zip
    dest: "{{ base_path }}"
    remote_src: yes
    list_files: yes
  register: archive_contents

####API Auth and User Provision Section #####

- name: Login to Vault API
  uri:
    url: "{{ logon_url }}"
    method: POST
    body_format: json
    body:
      username: "{{ admin_user }}" 
      password: "{{ admin_pw }}"
      #v2 concurrent_sessions= " {{ concurrent_session_bool }} "
    validate_certs: "{{ logon_ssl_validation }}"
  register: login_json_results

- debug:
     var: login_json_results

- name: Set Login token
  set_fact: 
    ca_login_token: "{{ login_json_results.json.CyberArkLogonResult }}"

- debug:
     var: ca_login_token  

- name: Add User API
  uri:
    url: "{{ add_user_url }}"
    method: POST
    headers:
      authorization: "{{ ca_login_token }}"
    body_format: json
    status_code: 200, 201, 208
    body:
      UserName: "{{ new_cp_user }}" 
      InitialPassword: "{{ new_cp_pw }}"
      UserType: "{{ user_type }}"
      ChangePassOnNextLogon: no
      EnableUser: yes
      PasswordNeverExpires: yes
      VaultAuthorization:
        - AuditUsers
      Location: "\\Applications"
    validate_certs: "{{ logon_ssl_validation }}"
  register: add_user_results

- debug:
     var: add_user_results

- name: Get User ID for Provider user
  set_fact: 
    aim_prov_user_id: "{{ add_user_results.json.id }}"

- debug:
     var:  aim_prov_user_id


- name: Put UserID in local file 
  copy:
    content: "{{ aim_prov_user_id }}"
    dest: "{{ cp_ansible_user_id_file }}"

- name: Create SAFE for CP
  uri: 
    url: "{{ base_pas_url }}/PasswordVault/API/Safes"
    method: POST
    headers:
      authorization: "{{ ca_login_token }}"
    status_code: 200, 201, 208, 409
    body_format: json
    body:
      safeName: "Safe-{{ ansible_hostname }}"
      description: Safe for {{ ansible_hostname }}
    validate_certs: "{{ logon_ssl_validation }}"
  register: safe_creation_results

- debug:
     var: safe_creation_results

- name: Create CP-hosted application
  uri: 
    url: "{{ base_pas_url }}/PasswordVault/WebServices/PIMServices.svc/Applications/"
    method: POST
    headers:
      authorization: "{{ ca_login_token }}"
    status_code: 200, 201, 208, 409
    body_format: json
    body:
      application:
        AppID: "app-{{ ansible_hostname }}"
        Description: CP-hosted for application host {{ ansible_hostname }}
    validate_certs: "{{ logon_ssl_validation }}"
  register: app_creation_results

- debug:
     var: app_creation_results


- name: Add Auth methods CP-hosted application (Private IP)
  uri: 
    url: "{{ base_pas_url }}/PasswordVault/WebServices/PIMServices.svc/Applications/app-{{ ansible_hostname }}/Authentications"
    method: POST
    headers:
      authorization: "{{ ca_login_token }}"
    status_code: 200, 201, 208, 409
    body_format: json
    body:
      authentication:
        AuthType: machineAddress
        AuthValue: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    validate_certs: "{{ logon_ssl_validation }}"


# - name: Search Plaforms to CyberArk
#   uri: 
#     url: "{{ base_pas_url }}/PasswordVault/API/platforms?Search=Unix"
#     method: GET
#     headers:
#       authorization: "{{ ca_login_token }}"
#     validate_certs: "{{ logon_ssl_validation }}"
#   register: platform_results
# - debug:
#      var: platform_results

- name: Get Plaform to CyberArk
  uri: 
    url: "{{ base_pas_url }}/PasswordVault/API/Platforms/{{ account_platform_type }}"
    method: GET
    headers:
      authorization: "{{ ca_login_token }}"
    validate_certs: "{{ logon_ssl_validation }}"
  register: platform_results
- debug:
     var: platform_results


- name: Add Account to CyberArk via API
  uri: 
    url: "{{ base_pas_url }}/PasswordVault/API/Accounts/"
    method: POST
    headers:
      authorization: "{{ ca_login_token }}"
    status_code: 200, 201, 208, 409
    body_format: json
    body:
      name: shimran-test-{{ ansible_hostname}}
      platformId: "{{ account_platform_type }}"
      address: "None"
      Username: " {{ cyberark_account_name }}"
      SafeName: Safe-{{ ansible_hostname }}
      secretType: "{{ cyberark_account_type }}"
      secret: "{{ cyberark_account_secret }}"
      secretManagement : {
        automaticManagementEnabled": true,
          }

    validate_certs: "{{ logon_ssl_validation }}"
  register: account_creation_results

- debug:
    var: account_creation_results

- name: Account ID created
  set_fact: 
    vault_account_id: "{{ account_creation_results.json.id }}"

- name: Put AccountID in local file 
  copy:
    content: "{{ vault_account_id }}"
    dest: "{{ cp_ansible_account_id_file }}"

# DOC: https://docs.cyberark.com/AAM-CP/Latest/en/Content/CP%20and%20ASCP/Testing-Installation.htm?TocPath=Installation%7CCredential%20Provider%7C_____6

# Do not allow 409, it needs to grab a user ID to store on application

- name: Add PROV USER CP for Safe
  uri: 
    url: "{{ base_pas_url }}/PasswordVault/API/Safes/Safe-{{ ansible_hostname }}/Members/"
    method: POST
    headers:
      authorization: "{{ ca_login_token }}"
    status_code: 200, 201, 208 
    body_format: json
    body:
      memberName: "{{ new_cp_user }}"
      permissions:
        useAccounts: true
        retrieveAccounts: true
        listAccounts: true
        viewSafeMembers: true
        accessWithoutConfirmation: true
    validate_certs: "{{ logon_ssl_validation }}"
  register: safe_creation_results

- debug:
     var: safe_creation_results

- name: Add CPhost Application as member  for Safe
  uri: 
    url: "{{ base_pas_url }}/PasswordVault/API/Safes/Safe-{{ ansible_hostname }}/Members/"
    method: POST
    headers:
      authorization: "{{ ca_login_token }}"
    status_code: 200, 201, 208, 409
    body_format: json
    body:
      memberName: app-{{ ansible_hostname }} 
      permissions:
        useAccounts: true
        retrieveAccounts: true
        listAccounts: true
        viewSafeMembers: true
        accessWithoutConfirmation: true
    validate_certs: "{{ logon_ssl_validation }}"
  register: safe_creation_results

### CONFIGURATION OF CRED FILE #####

- name: Create /etc/opt/CARKaim/vault
  ansible.builtin.file:
    path: /etc/opt/CARKaim/vault
    state: directory
    mode: '0755'

- name:  Set Credential File with proper permissions
  file:
    path: "{{ create_credfile_path }}"
    mode: 0755

- name: Create Admin Credential File
  ansible.builtin.shell: /cp_install/CreateCredFile "{{ admin_credfile_path }}" Password -Username "{{ admin_user }}"  -Password "{{ admin_pw }}" -Hostname -EntropyFile

- name: Create Prov_ Credential File
  ansible.builtin.shell: /cp_install/CreateCredFile "{{ app_credfile_path }}" Password -Username "{{ new_cp_user }}"  -Password "{{ new_cp_pw }}" -Hostname -EntropyFile


#### CONFIGURATION OF VAULT INI #####


- name: Set vault.ini Into Place
  command: cp "{{ base_path }}"/Vault.ini "{{ vault_ini_path }}"

- name: Write Vault address in Vault.ini
  ansible.builtin.lineinfile:
    path: "{{ vault_ini_path }}"
    regexp: '^(.*)ADDRESS=1.1.1.1(.*)$'
    line: ADDRESS={{ vault_address }}
    owner: root
    group: root
    mode: '0644'

#### CONFIGURATION OF AIMPARAMS #####

- name: Copy Aimparms to proper directory
  copy: remote_src=True src=/cp_install/aimparms.sample dest="{{ aimparms_path }}"

- name: Accept EULA in aimparams
  ansible.builtin.lineinfile:
    path: "{{ aimparms_path }}"
    regexp: '^(.*)AcceptCyberArkEULA=No(.*)$'
    line: AcceptCyberArkEULA=Yes
    owner: root
    group: root
    mode: '0644'

- name: Uncomment Create Vault Environment
  ansible.builtin.lineinfile:
    path: "{{ aimparms_path }}"
    regexp: '^(.*)#CreateVaultEnvironment=yes(.*)$'
    line: CreateVaultEnvironment=yes
    owner: root
    group: root
    mode: '0644'


- name: Set Vault INI in Aimparams
  ansible.builtin.lineinfile:
    path: "{{ aimparms_path }}"
    regexp: '^(.*)VaultFilePath=(.*)$'
    line: VaultFilePath="{{ vault_ini_path }}"
    owner: root
    group: root
    mode: '0644'

- name: Set CredFile Admin Path  in Aimparams
  ansible.builtin.lineinfile:
    path: "{{ aimparms_path }}"
    regexp: '^(.*)CredFilePath=(.*)$'
    line: CredFilePath="{{ admin_credfile_path }}"
    owner: root
    group: root
    mode: '0644'

#### START CP ####

- name: Install CP
  package: 
    name: "{{ cp_rpm_path }}" 
    state: present
    disable_gpg_check: "{{ disable_gpg_check }}"
  register: install_result

- debug:
     var: install_result 

- name: Start Provider Service
  service: 
   name: aimprv 
   state: started

- name: Check CP status
  command: systemctl status aimprv.service
  register: aimprv_result

- debug:
     var: aimprv_result

#### CREATE APP Add Hash Auth #####

- name: Copy & Create File.
  copy:
    dest: "{{ sample_script_path }}"
    content: |
      #!/bin/bash
      /opt/CARKaim/sdk/clipasswordsdk GetPassword \
      -p AppDescs.AppID=app-{{ ansible_hostname }} \
      -p QueryFormat=2 \
      -p Query="Safe=Safe-{{ ansible_hostname }};UserName="{{ cyberark_account_name }}"" \
      -p Reason="Darren Khan, SE extrodinaire!" \
      -o Password
    mode: '0700'

- name: Change permissions /opt/CARKaim/bin
  ansible.builtin.file:
    path: /opt/CARKaim/bin
    state: directory
    mode: '0700'

- name: Change permissions /opt/CARKaim/sdk/
  ansible.builtin.file:
    path: /opt/CARKaim/sdk/
    state: directory
    mode: '0700'

- name: Create hash to registered var
  command: /opt/CARKaim/bin/aimgetappinfo GetHash -FilePath "{{ sample_script_path }}"
  register: hashed_script_value

- debug:
    var: hashed_script_value.stdout


- name: Add Auth methods CP-hosted application (Hash)
  uri: 
    url: "{{ base_pas_url }}/PasswordVault/WebServices/PIMServices.svc/Applications/app-{{ ansible_hostname }}/Authentications"
    method: POST
    headers:
      authorization: "{{ ca_login_token }}"
    status_code: 200, 201, 208, 409
    body_format: json
    body:
      authentication:
        AuthType: Hash
        AuthValue: "{{ hashed_script_value.stdout }}"
        Comment: "via API Ansible"
    validate_certs: "{{ logon_ssl_validation }}"
  register: hash_creation_results

- debug:
    var: hash_creation_results


#### CLEANUP #####

- name: Remove /cp_install
  file:
    path: '/cp_install'
    state: absent
  